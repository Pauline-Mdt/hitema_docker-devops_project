name: GitHub Actions
run-name: ${{ github.actor }} ${{ github.event_name }} on ${{ github.head_ref || github.ref_name }}

on:
  push:
    branches: master
  pull_request:
    branches: master

jobs:
  test:

    name: Laravel tests

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: api

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: List files
        run: ls -la

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Generate key
        run: php artisan key:generate

      - name: Execute Unit tests
        run: php artisan test --testsuite=Unit

  build-and-push:

    name: Build and push images on dockerhub

    needs: test

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./DockerfileLaravel
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/docker-base-laravel_php8.1-apache:latest

  vm:

    name: Build the VM on Azure

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Azure
        run: az login -u ${{ secrets.ARM_USERNAME }} -p ${{ secrets.ARM_PASSWORD }}
#        working-directory: ./terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        working-directory: ./terraform

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Set Azure public IP address as GitHub Secret
        run: |
          ip=$(terraform output vm_public_ip_address)
          username=$(terraform output vm_username)
          echo "::set-env name=VM_PUBLIC_IP::$ip"
          echo "::set-env name=VM_USERNAME::$username"

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

#      - name: Append IP address to inventory file
#        run: echo "${{ secrets.AZURE_RM_PUBLIC_IP }}" >> inventory
#
#      - name: Add VM to inventory
#        lineinfile:
#          path: /path/to/inventory/file
#          line: '{{ inventory_hostname }} ansible_host={{ VM_PUBLIC_IP }}'
#
#      - name: Write inventory file
#        lineinfile:
#          path: /path/to/inventory_file
#          line: "my_vm ansible_host={{  }} ansible_user=my_vm_user"

      - name: Add VM to inventory
        vars:
          host: lg_vm
          ip_address: '{{ secrets.VM_PUBLIC_IP }}'
          username: '{{ secrets.VM_USERNAME }}'
        lineinfile:
          dest: ./ansible/inventory
          line: '{{ host }} ansible_host={{ ip_address }} ansible_user={{ username }}'
          state: present

      - name: Install Docker on VM
        run: ansible-playbook -i inventory -u ${{ env.VM_ADMIN_USERNAME }} playbook_install_docker.yaml
        working-directory: ./ansible

  deploy:

    name: Deploy on the VM

    needs: [test, build-and-push, vm]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Azure
        run: az login -u ${{ secrets.ARM_USERNAME }} -p ${{ secrets.ARM_PASSWORD }}
        working-directory: ./ansible

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Add VM to inventory
        vars:
          host: lg_vm
          ip_address: '{{ secrets.VM_PUBLIC_IP }}'
          username: '{{ secrets.VM_USERNAME }}'
        lineinfile:
          dest: ./ansible/inventory
          line: '{{ host }} ansible_host={{ ip_address }} ansible_user={{ username }}'
          state: present

      - name: Install Docker on VM
        run: ansible-playbook -i inventory -u ${{ env.VM_ADMIN_USERNAME }} playbook_install_docker.yaml
        working-directory: ./ansible
