name: GitHub Actions
run-name: ${{ github.actor }} ${{ github.event_name }} on ${{ github.head_ref || github.ref_name }}

on:
  push:
    branches: master
  pull_request:
    branches: master

jobs:
  test:

    name: Laravel tests

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: api

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: List files
        run: ls -la

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Generate key
        run: php artisan key:generate

      - name: Execute Unit tests
        run: php artisan test --testsuite=Unit

  build-and-push:

    name: Build and push images on dockerhub

    needs: test

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./DockerfileLaravel
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/docker-base-laravel_php8.1-apache:latest

  vm:

    name: Build the VM on Azure

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Azure
        run: az login -u ${{ secrets.AZURE_RM_USERNAME }} -p ${{ secrets.AZURE_RM_PASSWORD }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -var 'ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}'

      - name: Terraform Apply
        run: terraform apply -var 'ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}' -auto-approve

      - name: List files
        run: ls -la

      - name: Show different files
        run: |
          git diff
          git status
          
      - uses: EndBug/add-and-commit@v9 # You can change this to use a specific version.
        with:
          add: 'terraform.tfstate'

          # The name of the custom committer you want to use, if different from the author of the commit.
          # Default: the name of the author (set with either author_name or default_author)
#          committer_name: Committer Name

          # The local path to the directory where your repository is located. You should use actions/checkout first to set it up.
          # Default: '.'
          cwd: './terraform'

          default_author: github_actions

          # Arguments for the git fetch command. If set to false, the action won't fetch the repo.
          # For more info as to why fetching is usually recommended, please see the "Performance on large repos" FAQ.
          # Default: --tags --force
#          fetch: false

          # The message for the commit.
          # Default: 'Commit from GitHub Actions (name of the workflow)'
          message: 'Commit from GitHub Actions - Update terraform.tfstate file'

          # Whether to push the commit and, if any, its tags to the repo. It can also be used to set the git push arguments (see the paragraph below for more info)
          # Default: true
#          push: false
          github_token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Set Azure public IP address as GitHub Secret
        run: |
          echo $(terraform output vm_public_ip_address)
          echo $(terraform output vm_username)
#          ip=$(terraform output vm_public_ip_address | sed 's/"//g')
#          username=$(terraform output vm_username | sed 's/"//g')
#          echo "AZURE_RM_PUBLIC_IP=$ip" >> $GITHUB_ENV
#          echo "AZURE_RM_USERNAME=$username" >> $GITHUB_ENV

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: List files
        run: ls -la

      - name: List files
        run: ls -la ../ansible

      #      - name: Append IP address to inventory file
#        run: echo "${{ secrets.AZURE_RM_PUBLIC_IP }}" >> inventory
#
#      - name: Add VM to inventory
#        lineinfile:
#          path: /path/to/inventory/file
#          line: '{{ inventory_hostname }} ansible_host={{ VM_PUBLIC_IP }}'
#
#      - name: Write inventory file
#        lineinfile:
#          path: /path/to/inventory_file
#          line: "my_vm ansible_host={{  }} ansible_user=my_vm_user"

      - name: Set up Ansible inventory
        run: echo "lg_vm ansible_host=$(terraform output vm_public_ip_address) ansible_user=$(terraform output vm_username)" > ../ansible/inventory

      - name: Install Docker on VM
        run: ansible-playbook -i inventory -u ${{ env.AZURE_RM_USERNAME }} playbook_install_docker.yaml
        working-directory: ansible

  deploy:

    name: Deploy on the VM

    needs: [test, build-and-push, vm]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Azure
        run: az login -u ${{ secrets.AZURE_RM_USERNAME }} -p ${{ secrets.AZURE_RM_PASSWORD }}
        working-directory: ansible

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Set up Ansible inventory
        run: |
          mkdir -p ./ansible/inventory
          echo "[vm]" > ./ansible/inventory/hosts
          echo "lg_vm ansible_host=${{ secrets.AZURE_RM_PUBLIC_IP }} ansible_user=${{ secrets.AZURE_RM_USERNAME }}" >> ./ansible/inventory/hosts

      - name: Install Docker on VM
        run: ansible-playbook -i inventory -u ${{ env.AZURE_RM_USERNAME }} playbook_install_docker.yaml
        working-directory: ansible

